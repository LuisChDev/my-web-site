In this file, I'll start to define my site in terms of the object oriented model.
* Software Design Specification
** Name of the project
newsite
** Summary 
A web app whose purpose is to showcase my web design and development abilities.
Its users should be able to perceive my capabilities with regards to
development. This is its main purpose. So it will need the following elements:
+ Animations
+ interactive elements
+ some form of asynchronous connection to the server
+ routing
+ info on me, and my knowledge of the different areas of CompSci.
** Use cases.
*** Non engineer
a non-techie gets a hold of my URL somehow. Maybe someone was trying to get me
a job, and they just spread it out since it doesn't cost anything. This
non technical person won't notice the actual difficulties in developing the
site, but the *design* qualities of it. In other words, the layout,
interactivity, colors, other stuff that isn't really my field of work, will
be judged, and then based on this, the project as a whole. So this
person will need to be received with high quality graphics.
*** engineer
The engineer will notice the actual programming and will be interested to
know whether I can work with modern technologies, do version control, etc.
This is why a link to Github with the webpage code is absolutely necessary.
well documented code is also a must. If I can place design documents all
the better. For the page, actual programming must take place, so I will
need to include complex stuff like animated transitions, backgrounds, and
so on. *Highlight* the most difficult and interesting parts of the code
you wrote.
** Description of the site
So from that information, I should be able to come up with a full, definite
high-level description of the site I'm about to build (or rather finish
building). 

"newsite" is divided into sections. The first one focuses on giving the
visitor a warm welcome. It should have the best animations. I'm currently
thinking of a Super Mario map with enemies you can click to push around,
kill and throw at one's own pleasure. After defeating enough enemies, you
get a invite to get to the next level.

So, you get thrown in the first stage, where you get to know a bit about me.
The second stage will be about my skills for programming. Throw in a bit of
each. I picture this as a series of blocks, each with the logo of a language,
technology or whatever. When clicked, they have unique, awesome powers.

The third stage, once you get past the second, will include all my projects,
listed individually. Since I don't really have a lot of projects, besides
this very webpage, the facial recognition thing that doesn't work, and the
reddit bot, I'll have to fill up with some widgets. They'll be centered on
certain utilities, like a map (placing things over it), or drawing. Thinking
about it, yes. Ill build two mini-apps to complete this website, and they'll
be:
+ a world map, where you can sign from your location and add a little note.
+ a blank slate where you can make your own Tangram configuration and save
  it.
As it might be seen, these will also demonstrate asynchronous and persistence
abilities.

The fourth and final stage will be about my social media presence. Of course,
the main interest for engineers will be my github account. While on the 
other hand, the personal accounts will be useful to have for non techs, so
there's that. 
** Structured description
*** Stage 0: global
**** component classes
***** Game
****** state:
+ int coinCount
+ int lifeCount
+ int score
+ int time
+ int YoshiCoinCount
+ bool isPaused
****** methods:
+ addCoin(){coinCount==99 ? addLife() && cCount=0 : cCount++}
+ addLife(){lCount==99 ? lCount=lCount : lifeCount++}
+ decLife(){lifeCount--}
+ addScore(points){score = score + points}
+ setInterval(1 second){time++}
+ addJCoin(){see addCoin}
+ pauseGame(){}
+ pauseGame(){}
**** component functions
none
*** Stage 1: Introduction
This section *has a* walkable surface and an environment, which *have*
different tiles that can be walked on, transversed or are impassable.
On this terrain *there's a* number of entities, which *have* an
orientation, position, speed, animation state (hiding, running, standing
still, etc), and some others. when the user *clicks* on them, their state
*changes* depending on how the interaction went.
**** component classes
***** tileGrid
****** state:
+ String[] tileType
****** methods:
+ 
**** component functions
***** tile
****** render:
(props) => {<div style {props.handleClick? onClick:""}/>}
*** Stage 2: Skills
*** Stage 3: Programs
*** Stage 4: Contact
* game class hierarchy
** Game
+ ATTRS
  - coinCount: int = 0
  - numEnemies: int = 0
  - score: int = 0
  - time: int = 0
  - yoshiCoinCount: int = 0
  - isPaused: bool = false
+ METHODS
  - setCoin(coins: int)
  - setLife(lives: int)
  - setScore(points: int)
  - setTime()
  - setJCoin(JCoins: int)
  - pauseGame()
  - restartGame()
*** HAS MANY Sprites
+ ATTRS
  - state: int = 0
+ METHODS
  - animate()
* COMMENT local config
#+STARTUP: indent

